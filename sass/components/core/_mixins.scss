$prefixes: "webkit", "ms";
@mixin slant($bg: red, $angle: 20deg, $to: -100% 0) {
	// https://stackoverflow.com/questions/25360411/responsive-css-triangle-with-percents-width
	&::before {
		content: "";
		position: absolute;
		top: 0;
		left: 0;
		background-color: $bg;
		width: 100%;
		height: 100%;
		z-index: -1;
		opacity: 1;
		transform: skewX($angle);
		transform-origin: $to;
	}
}

//todo: test
@mixin ul-fa($content: "\F00C", $class: '-check') {
	ul.fa#{$class} {
		> li {
			padding-bottom: 10px;
			position: relative;
		}

		> li::before {
			font-family: "Font Awesome 5 Free";
			content: $content;
			color: #58a558;

			position: absolute;
			left: -25px;
			top: 0;
			bottom: 0;

			margin-bottom: auto;
			margin-right: 10px;
			margin-top: auto;

			font-size: 10px;
			font-weight: 900;
		}
	}
}

//todo: remove? webpack does it auto
@mixin prefix($property, $value) {
	@each $prefix in $prefixes {
		#{'-' + $prefix + '-' + $property}: $value;
	}
	#{$property}: $value;
}

// @include resp((  ));
// 	xl l m s
@mixin resp($properties) {
	@each $prop, $vals in $properties {
		$l: length($vals);
		@if ($l < 2) {
			@error 'a property must have at least 2 values!';
		}
		$q: nth($media-q, $l - 1);
		@for $i from $l through 1 {
			@media(nth($q, $i)) {
				#{$prop}: nth($vals, $i);
			}
		}
	}
}
//todo: triangle generator

@function resp-logic($value, $i: 0, $dir: x) {
	//@return $value * .75;
	@return $value;
}

//todo: better names

//#widths #heights #sizes
//	.w .h5
//(called in helper)
@mixin init-s() {
	$list: map-get($units, s);
	$length: length($list);

		.h {
			@for $i from 1 through length($list) {
				&#{$i} {
					$s: f(s, $i);
					//@include resp((height:($s, resp-logic($s))));
					height: $s;
					&-lh {
						//@include resp((height:($s, resp-logic($s)), line-height: ($s, resp-logic($s))));
						height: $s;
						line-height: $s;
					}
				}
			}
		}

		.w {
			@for $i from 1 through length($list) {
				&#{$i} {
					$s: f(s, $i);
					width: $s;
					//@include resp((width:($s, resp-logic($s))));
				}
			}
		}
}

//#spacing, #margins, #paddings
//	.m3-t -> margin-top: nth(map-get($units, mp), 3)
@mixin init-spacing() {
	$list: map-get($units, mp);
	$classes: (
		-a: (-top, -right, -bottom, -left),
		-s: (-left, -right),
		-tb: (-top, -bottom),
		-l: -left,
		-r: -right,
		-t: -top,
		-b: -bottom
	);

	@for $i from 1 through length($list) {
		.m#{$i} {
			@each $class, $props in $classes {
				//todo placeholders to normalize to these
				&#{$class}{
					@each $prop in $props {
						//$u: vw;
						//// $val: nth($spaces, $i) + 0px;
						//@if($prop == '-top' or $prop == '-bottom'){
						//	$u: vh;
						//}
						$val: f(mp, $i);
						// @include resp((margin + $prop: ($val, resp-logic($val))));
						//@include resp((margin + $prop: ($val, $i+0%)));
						#{margin+$prop}: $val;

						//&-const {
						//	#{margin + $prop}: $val;
						//}
					}
				}
			}
		}

		.p#{$i} {
			@each $class, $props in $classes {
				&#{$class} {
					@each $prop in $props {
						//$u: vw;
						//// $val: nth($spaces, $i) + 0px;
						//@if($prop == '-top' or $prop == '-bottom'){
						//	$u: vh;
						//}
						$val: f(mp, $i);
						// @include resp((padding + $prop: ($val, resp-logic($val))));
						//@include resp((padding + $prop: ($val, $i+0%)));
						#{padding+$prop}: $val;

						//&-const {
						//	#{padding + $prop}: $val;
						//}
					}
				}
			}
		}
	}
}
//#colors
@mixin colors() {

	@each $class, $vals in $colors{

		@for $i from 1 through length($vals){
			$c: $class;

			@if $i > 1 {
				$c: $class + $i;
			}

			.#{$c}{
				color: color($class, $i);
				fill: color($class, $i);

				svg{
					fill: color($class, $i);
				}
			}

			.bg-#{$c}{
				background-color: color($class, $i);
			}

		}
	}
}


//todo: disable body scroll on touch
@mixin modal(){
	.modal{
		position: fixed;
		overflow-y: scroll;
		top:0;
		left: 0;
		right:0;
		bottom:0;
		background: rgba(color(d), .7);
		z-index: 10000;

		> .modal-body{
			position: relative;
			@include resp((
							width: (fibon(100vw, -1), 100vw)
			));
			// max-height: 100%;
			min-height: fibon(100vh, -5);
			margin:auto;
			left:0;
			right:0;
			top:fibon(100vh, -7);
			background: color();

			> .modal-imgs{
				max-height: fibon(100vh, -1);
				margin-left: - fibon(100vw, -6);

				img{
					object-fit: cover;
					max-width: fibon(100vw, -1);
				}
			}

			> .btn-x-modal{
				position: absolute;
				line-height: f(8);
				width: f(8);
				height: f(8);
				text-align: center;
				background: rgba(color(d), .2);
				color: white;


				right:0;
				top:0;
			}
		}
	}

	body.modal-open{
		overflow-y: hidden;

		.modal{
			// display: block;
		}
	}
}